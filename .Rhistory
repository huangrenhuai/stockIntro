modFit <- train(Class ~ ., data=training, method="rpart")
library(rattle)
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel,uniform=T, main = "Tree")
text(modFit$finalModel, use.n=T, all=T,cex=0.8)
dataSet <- segmentationOriginal
inTrain <- createDataPartition(y = dataSet$Case, p = 0.5, list = F)
training <- dataSet[inTrain,];
testing <- dataSet[-inTrain,];
dim(training); dim(testing);dim(dataSet)
set.seed(125)
modFit <- train(Class ~ ., data=training, method="rpart")
library(rattle)
x11()
fancyRpartPlot(modFit$finalModel)
x11()
plot(modFit$finalModel,uniform=T, main = "Tree")
text(modFit$finalModel, use.n=T, all=T,cex=0.8)
graphics.off()
dataSet <- segmentationOriginal
inTrain <- createDataPartition(y = dataSet$Case, p = 0.6, list = F)
training <- dataSet[inTrain,];
testing <- dataSet[-inTrain,];
dim(training); dim(testing);dim(dataSet)
set.seed(125)
modFit <- train(Class ~ ., data=training, method="rpart")
library(rattle)
x11()
fancyRpartPlot(modFit$finalModel)
x11()
plot(modFit$finalModel,uniform=T, main = "Tree")
text(modFit$finalModel, use.n=T, all=T,cex=0.8)
library(pgmm)
data(olive)
olive = olive[,-1]
str(olive)
8.45+7.95+14.95+13.5+12.95+14.5+11.95+13.95
?tree
install.packages(tree)
install.packages("tree")
library(tree)
?tree
library(tree)
treeFit <- tree(Area ~ ., data = olive)
treeFit
treeP <- predict(treeFit, newdata = as.data.frame(t(colMeans(olive))))
treeP
newdata = as.data.frame(t(colMeans(olive)))
(newdata = as.data.frame(t(colMeans(olive))))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
?SAheart
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obisity + tobacco + typea + ldl, method="glm", family=binomial, data = trainSA)
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family=binomial, data = trainSA)
trainSA$chd
table(trainSA$chd)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, prediction(modFit, newdata=trainSA))
missClass(testSA$chd, prediction(modFit, newdata=testSA))
missClass(trainSA$chd, predict(modFit, newdata=trainSA))
missClass(testSA$chd, predict(modFit, newdata=testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel)
str(vowel.train)
modFit <- train(factor(y) ~ ., method = "rf", data=vowel.train)
?varImp
set.seed(33833)
modFit <- train(factor(y) ~ ., method = "rf", data=vowel.train)
varImp(modFit)
set.seed(33833)
modFit <- train(y ~ ., method = "rf", data=vowel.train)
varImp(modFit)
set.seed(33833)
modFit <- train(as.factor(y) ~ ., method = "rf", data=vowel.train)
varImp(modFit)
library(rjags)
library(rjags)
?par
?plot
x11()
?test
?text
text(x=1,y=1,labels = "test1", col = "blue", adj = c(0,1))
plot(1:10, 1:10)
text(x=1,y=1,labels = "test1", col = "blue", adj = c(0,1))
text(x=0,y=0,labels = "test0", col = "blue", adj = c(0,1))
text(x=0,y=0,labels = "test0", col = "blue", adj = c(0,1))
text(x=0,y=0,labels = "test0", col = "blue", adj = c(1,0)
text(x=0,y=0,labels = "test0", col = "blue", adj = c(1,0))
text(x=0,y=0,labels = "test0", col = "blue", adj = c(0,1))
text(x=0,y=0,labels = "test0", col = "red", adj = c(0,1))
text(x=0.2,y=0,labels = "test0", col = "red", adj = c(0,1))
text(x=0.2,y=1,labels = "test0", col = "red", adj = c(0,1))
text(x=0.5,y=1,labels = "test0", col = "red", adj = c(0,1))
text(x=0.5,y=1,labels = "test0", col = "red", adj = c(0,1))
text(x=1,y=1,labels = "test0", col = "red", adj = c(0,1))
text(x=9,y=1,labels = "test0", col = "red", adj = c(0,1))
text(x=9,y=9,labels = "test0", col = "red", adj = c(0,1))
text(x=9,y=10,labels = "test0", col = "red", adj = c(0,1))
text(x=10,y=10,labels = "test0", col = "red", adj = c(0,1))
text(x=10,y=10,labels = "test0", col = "red", adj = c(0,2))
text(x=10,y=10,labels = "test0", col = "red", adj = c(0,3))
text(x=10,y=10,labels = "test0", col = "red", adj = c(0,4))
text(x=10,y=10,labels = "test0", col = "red", adj = c(1,4))
text(x=10,y=10,labels = "test0", col = "red", adj = c(5,4))
text(x=10,y=10,labels = "test0", col = "red", adj = c(5,4), cex = 1.5)
text(x=10,y=10,labels = "test0", col = "red", adj = c(0,0), cex = 1.5)
text(x=10,y=10,labels = "test0", col = "red", adj = c(1,1), cex = 1.5)
text(x=10,y=10,labels = "test0", col = "red", adj = c(1,1), cex = 1.5)
text(x=10,y=10,labels = "test0", col = "red", adj = c(1,1), cex = 1.4)
text(x=10,y=10,labels = "test0", col = "green", adj = c(1,1), cex = 1.2)
text(x=10,y=10,labels = "test0", col = "green", adj = c(1,1), cex = 2)
text(x=10,y=2,labels = "test0", col = "green", adj = c(1,1), cex = 2)
text(x=10,y=2,labels = "test0", col = "green", adj = c(1,1), cex = 2)
text(x=10,y=2,labels = "test0", col = "green", adj = c(1,1), cex = 2)
text(x=10,y=2,labels = "test0", col = "green", adj = c(1,1), cex = 2)
text(x=10,y=2,labels = "test0", col = "green", adj = c(1,1), cex = 2)
text(x=10,y=2,labels = "test0", col = "green", adj = c(1,1), cex = 2)
seq(1:10, 20)
?seq
seq(form = 1, to = 10, by = 0.5)
seq(from = 1, to = 10, by = 0.5)
seq(from = 1, to = 10, length.out = 20)
seq(from = 1, to = 10, length.out = 21)
seq(from = 1, to = 10, length.out = 19)
seq(from = 0, to = 10, length.out = 19)
seq(from = 0, to = 10, length.out = 21)
x = seq(from = 0, to =10, length.out=20)
y = seq(from = 0, to =50, length.out=20)
plot(x,y)
text(10, 10, labels = "test1")
text(x=10, y=20, labels = "test1")
?par
?dev.copy2eps
?plot
exit
?system.file
install.packages("readxl")
install.packages("readxl", type="source")
library(readxl)
Rcpp::sourceCpp('Git/adv-r/RH/example_15.cpp')
Rcpp::sourceCpp('Git/adv-r/RH/example_15.cpp')
Rcpp::sourceCpp('Git/adv-r/RH/example_15.cpp')
vignette("Rcpp-quickref")
vignette("Rcpp-modules")
?vignette
library(pryr)
(function(x) 3)()
function(x) 3()
(function(x) x + 3)(10)
lapply(mtcars function(x) {sd(x)/mean(x)})
lapply(mtcars, function(x) {sd(x)/mean(x)})
unlist(lapply(mtcars, function(x) {sd(x)/mean(x)}))
match.fun
?match.fun
?approxfun
require(pryr)
library(pryr)
require(pryr)
f <- function() {}
typeof(f)
is.function(f)
is.primitive(f)
typeof(sum)
is.primitive(sum)
is.function(mean)
is.primitive(mean)
typeof(mean)
is.object(sum)
is.object(f)
is.object(1)
is.object(1:2)
is.object
sum
f
sl
ls
mean()
mean
df <- data.frame()
otype(df)
otype(sum)
sum()
otype(f)
is.object(df)
is.object(df) &
!isS4(df)
is.object(f)
is.object(f)otype
otype(df)
otype(df)
otype(1)
otype(c)
otype(:)
otype(`:`)
otype(`[`)
ftype(mean)
mean
useMethod(mean)
UseMethod(mean)
UseMethod("mean")
otype(mean)
ftype(mean)
ftype('sum')
ftype('mean')
otype(1)
otype('c')
otype('1.1')
c(1,'c')
c(1)
class(1)
class('c')
class(factor(1))
otype(factor(1))
otype(T)
otype(2+4i)
otype(vector())
otype(1:2)
otype(data.frame())
otype(as.list()
)
otype(as.list(1))
otype(as.factor(1))
otype(as.list(NA, length = 100))
?"internal generic"
ftype(mean.Date)
ftype(mean)
gets3method(mean)
getS3method(mean)
getS3method(t.test)
getS3method(t.test.formula)
methods(class = "c")
methods(class = "ts")
methods(class = "Date")
methods(class = "data.frame")
foo <- list()
otype(foo)
ftype(foo)
class(foo)
class(foo) <- "foo"
class(foo)
otype(foo)
attributes(foo)
factor
data.frame
mean.Date
unclass(data.frame())
test <- list()
class(test) <- "test"
t
t?t
?t
t(test)
test <- 1:10
class(test)
class(test) <- "test"
test
t(test)
sqrt
methods(sqrt)
methods(Math)
Math
class(Math)
Math.factor
ftype(Math)
otype(Math)
base::Math
base::Math.Date
otype(base::Math.Date)
otype(base::Math)
ftype(base::Math)
?getS3method
getS3method("mean", "Date")
getS3method("Math", "factor")
Math
showMethods(Math)
class(Math)
ftype(Math.Date)
methods(class = "POSIXt")
methods(class = "POSIXct")
methods(class = "POSIXlt")
methods(class = "Date")
methods(mean)
length(methods(mean))
length(methods(mean))
base
ls(package:base)
mget(ls(package:base), inherits = T)
mget(ls(package:base), inherits = T)
?mget
ls(package::base)
ls(package:base)
ftype(ls(package:base))
ftype(xzfile)
ftype(`[`)
ftype(`sum`)
ll <- ls(base)
ll <- ls(package:base)
ll
class(ll)
lapply(ll, ftype)
table(lapply(ll, ftype))
table(sapply(ll, ftype))
(sapply(ll, ftype))
(sapply(ll, ftype))[1]
(sapply(ll, ftype))[2]
(sapply(ll, ftype))[3]
(sapply(ll, ftype))[4]
(sapply(ll, ftype))[5]
(sapply(ll, ftype))[6]
(sapply(ll, ftype))[7]
(sapply(ll, ftype))[8]
(sapply(ll, ftype))[9]
(sapply(ll, ftype))[10]
(sapply(ll, ftype))
grep("mean", (sapply(ll, ftype)))
grep("mean",ll)
ll[692:697]
(sapply(ll, ftype))[692]
methods(mean)
length(methods(mean))
ftype(mean)
f <- function() 1
g <- function() 2
class(g) <- "function"
class(f)
class(g)
length.function <- function(x) "function"
length(f)
length(g)
length.function <- function(x) "fun"
length(g)
length(f)
f <- function() 2; length(f)
f <- function() 1:2; length(f)
class(f) <- "fun"
class(f) <- "function"
length(f)
f <- function() 1:2; length(f)
ftype(f)
ftype(g)
f
g
attributes(f)
attributes(g)
class(f)
class(g)
list()
rm(list = ls())
y <- 1
g <- function(x) {
y <- 2
UseMethod("g")
}
g.numeric <- function(x) y
g(10)
h <- function(x) {
x <- 10
UseMethod("h")
}
h.character <- function(x) paste("char", x)
h.numeric <- function(x) paste("num", x)
h("a")
?UseMethod
?hclust
?kmeans
dist(as.matrix(mtcars))
dist <- dist(as.matrix(mtcars))
dist <- dist(as.matrix(mtcars))
dist
names(dist)
class(dist)
d <- dist(as.matrix(mtcars))
class(d)
d
install.packages("rpud")
pwd
require(rpub)
require(rpud)
require(rpud)
d
d
d
matrix(5*5, nrow = 5 byrow = T)
matrix(1:5*5, nrow = 5 byrow = T)
matrix(5*5, nrow = 5, byrow = T)
matrix(1:5*5, nrow = 5, byrow = T)
matrix(1:(5*5), nrow = 5, byrow = T)
m = matrix(1:(5*5), nrow = 5, byrow = T)
dist(m)
(m[,1]-mp[,2])
(m[,1]-m[,2])
(m[,1]-m[,2])^2
sum((m[,1]-m[,2])^2)
sum((m[1,]-m[2,])^2)
sum((m[1,]-m[2,])^2)mtcars
mtcars
m <- mtcars[1:5, ]
m
dist(m)
sqrt(sum(m[1,]-m[2,])^2)
plot(hclust(dist(mtcars)))
plot(h <- hclust(dist(mtcars)))
h
names(x)
names(h)
h$dist.method
h$method
cutree
getS3method("mean", "Date")
mean.Date
dict(mtcars[1:5,])
dist(mtcars[1:5,])
dist(mtcars[1:6,])
dist(mtcars[1:9,])
dist(mtcars[1:10,])
dist(mtcars[1:12,])
?dist
dist(1,2)
dist(mtcars[1:2]
dist(mtcars[1:2])
dist(mtcars[1:2,])
sqrt(sum(mtcars[1,]-mtcars[2,])^2)
library(plyr)
otype
ftype
library(ISLR)
names(NCI60)
names(NCI60$data)
dim(NCI60$data)
str(NCI60)
class(NCI60)
class(NCI60$data)
pcaFit  = prcomp(NCI60$data)
names(pcaFit)
?prcomp
names(pcaFit, scale = T)
pcaFit  = prcomp(NCI60$data, scale = T)
names(pcaFit)
pcaFit$x
class(pcaFit$x)
dim(pcaFit$x)
dim()
?spline()
library(rstan)
exit
quit
?pnorm
curve(pnorm)
curve(pnorm, xlim = c(-1,10))
curve(pnorm, xlim = c(-1,5))
curve(pnorm, xlim = c(-1,3))
x()
x11()
layout(matrix(1:4, nrow = 2, byrow = T))
curve(pnorm, xlim = c(-1,3))
curve(dnorm, xlim = c(-3,3))
curve(pnorm, xlim = c(-3,3))
curve(pnorm, xlim = c(-10,10))
curve(pnorm, xlim = c(-3,3))
curve(dnorm, xlim = c(-3,3))
curve(pnorm, xlim = c(-3,3))
curve(qnorm, xlim = c(-3,3))
curve(qnorm, xlim = c(0,1))
curve(qnorm, xlim = c(0,1))
?`+`
pnorm(9000, mean=10500, sd=1000)
curve(pnorm, xlim = c(-10, 10))
curve(pnorm, xlim = c(-5, 5))
pnorm(-0.1, mean = 0.05, sd = 0.1)
getwd()
setwd("~/OneDrive/CS/ds09Project/stock")
setwd("~/Git/ds09Git")
runApp()
library(shiny)
runApp()
setwd("~/OneDrive/CS/ds09Project/slidify")
library(slidify)
require(devtools)
require(devtools)
install_github("slidify", "ramnathv")
library(slidify)
getwd()
author("mydeck")
---
--- .class #id
setwd("~/OneDrive/CS/ds09Project/slidify/mydeck")
install_github("slidifyLibraries", "ramnathv")
install_github("slidifyLibraries", "ramnathv/slidifyLibraries")
install_github("ramnathv/slidifyLibraries")
install_github("ramnathv/slidify")
library(slidify)
library(slidify)
